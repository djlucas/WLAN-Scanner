[
  {
    "section_title": "I. Application Initialization and Core Setup",
    "modules": [
      {
        "name": "PyQt5 Application Bootstrap",
        "file": "main.py",
        "steps": [
          "Initialize `QApplication` instance.",
          "Load global configuration (see below).",
          "Set up internationalization (`i18n`).",
          "Create the main application window (`MainWindow`).",
          "Show the main window and start the event loop."
        ]
      },
      {
        "name": "Configuration Management",
        "file": "config_manager.py",
        "steps": [
          "Load Configuration: On startup, load application settings from a persistent configuration file (e.g., `~/.WLAN-Scanner/config.json` or `config.ini`).",
          {
            "type": "list",
            "items": [
              "Path to `poppler` binaries (for PDF handling).",
              "Default map image directory.",
              "Language setting (e.g., `en_US`).",
              "Measurement system (Imperial/Metric - boolean).",
              "Any other user preferences."
            ]
          },
          "Initial Setup Check: If configuration file does not exist or essential settings (like poppler path, language) are missing, prompt the user with the \"Preferences\" dialog on first launch. (Scan script paths are now hardcoded and not part of this check).",
          "Save Configuration: Provide functionality to save updated configuration settings."
        ]
      },
      {
        "name": "Internationalization",
        "file": "i18n_manager.py",
        "steps": [
          "Load translation strings from a specified language file (e.g., `i18n/en_US.txt`).",
          "Provide a mechanism to retrieve translated strings for all UI elements and messages.",
          "Allow dynamic language switching via preferences."
        ]
      },
      {
        "name": "Data Models and Structures",
        "file": "data_models.py",
        "steps": [
          {
            "type": "class_struct",
            "name": "APData",
            "description": "Define a structure to hold individual Access Point details from the scan:",
            "fields": [
              "`ssid` (string)",
              "`bssid` (string)",
              "`channel` (integer)",
              "`signal_strength` (integer, dBm)",
              "`security` (string, e.g., \"WPA2\", \"Open\")",
              "`frequency` (integer, MHz)",
              "`quality` (integer)",
              "`band` (string, e.g., \"2.4GHz\", \"5GHz\")"
            ]
          },
          {
            "type": "class_struct",
            "name": "ScanPoint",
            "description": "Represents a user-defined point on the map where a scan was performed:",
            "fields": [
              "`map_x`, `map_y` (float/integer coordinates on the scaled map image).",
              "`timestamp` (datetime object).",
              "`ap_list` (list of `APData` objects, representing all APs seen at this point)."
            ]
          },
          {
            "type": "class_struct",
            "name": "PlacedAP",
            "description": "Represents a user-placed Access Point on the map:",
            "fields": [
              "`name` (string, user-defined)",
              "`manufacturer` (string)",
              "`model` (string)",
              "`ip_address` (string)",
              "`ethernet_mac` (string)",
              "`map_x`, `map_y` (float/integer coordinates on the scaled map image).",
              "`associated_scan_data` (list of `APData` objects from the immediate scan under this AP).",
              "`timestamp_last_scan` (datetime object for the associated scan)."
            ]
          },
          {
            "type": "class_struct",
            "name": "Floor",
            "description": "Encapsulates data for a single floor plan:",
            "fields": [
              "`floor_number` (integer/string, e.g., \"1\", \"Ground Floor\").",
              "`original_image_path` (string).",
              "`cropped_image_path` (string, path to the internally saved cropped image).",
              "`scaled_image_path` (string, path to the internally saved 1920x1080 scaled image).",
              "`scale_line_horizontal` (tuple: `(x1, y1, x2, y2, physical_dimension_text)`).",
              "`scale_line_vertical` (tuple: `(x1, y1, x2, y2, physical_dimension_text)`).",
              "`placed_aps` (list of `PlacedAP` objects).",
              "`scan_points` (list of `ScanPoint` objects)."
            ]
          },
          {
            "type": "class_struct",
            "name": "SiteInfo",
            "description": "Stores general site information:",
            "fields": [
              "`site_name` (string, mandatory).",
              "`address` (string).",
              "`contact` (string).",
              "`telephone` (string)."
            ]
          },
          {
            "type": "class_struct",
            "name": "MapProject",
            "description": "Encapsulates all data for a complete mapping project:",
            "fields": [
              "`site_info` (`SiteInfo` object).",
              "`floors` (list of `Floor` objects).",
              "`current_floor_index` (integer, index of the currently active floor)."
            ]
          }
        ]
      }
    ]
  },
  {
    "section_title": "II. User Interface (UI) Design and Components",
    "modules": [
      {
        "name": "Main Window",
        "file": "main_window.py",
        "components": [
          {
            "name": "Central Widget",
            "description": "A custom widget that dynamically displays the current floor map and its associated APs/Scan Points. This will likely be a `QGraphicsView` with a `QGraphicsScene` for interactive map display."
          },
          {
            "name": "Floor Selector",
            "description": "A `QComboBox` or similar to switch between loaded floors."
          },
          {
            "name": "AP List/Table View",
            "type": "QTableWidget",
            "description": "Displays a list of APs from the *most recent* scan (either from a placed AP or a general scan point).",
            "columns": [
              "SSID",
              "BSSID",
              "Channel",
              "Signal",
              "Security",
              "Quality",
              "Frequency",
              "Band"
            ],
            "features": [
              "Allows sorting and filtering."
            ]
          },
          {
            "name": "Controls Panel",
            "type": "QVBoxLayout of QPushButtons",
            "buttons": [
              "Place AP: Toggles a mode for placing `PlacedAP` markers.",
              "Place Scan Point: Toggles a mode for placing general `ScanPoint` markers.",
              "Run Scan (Current Location): Initiates a scan at the current mouse position (if not placing an AP/Scan Point).",
              "Clear Current Floor Data: Clears all APs and Scan Points on the active floor.",
              "Clear All Project Data: Clears all `Floor` data and `SiteInfo`."
            ]
          },
          {
            "name": "Status Bar",
            "type": "QStatusBar",
            "description": "Displays application status (e.g., \"Ready\", \"Scanning...\", \"Error: Script not found\", \"Current Floor: 1\").",
            "features": [
              "Provides feedback on user actions and coordinates."
            ]
          }
        ]
      },
      {
        "name": "Menu Bar",
        "type": "QMenuBar",
        "menus": [
          {
            "name": "File",
            "items": [
              "New Project (triggers `SiteInfoDialog` and `FloorImportDialog` sequence).",
              "Open Project... (loads a saved project).",
              "Save Project / Save Project As....",
              "Exit."
            ]
          },
          {
            "name": "Edit",
            "items": [
              "Preferences... (opens `PreferencesDialog`).",
              "Edit Site Info... (opens `SiteInfoDialog` for current project)."
            ]
          },
          {
            "name": "Floor",
            "items": [
              "Add New Floor... (triggers `FloorImportDialog` sequence).",
              "Edit Current Floor Map (re-opens `FloorImportDialog` for current floor).",
              "Set Scale Lines (Current Floor) (opens `ScaleLineDialog`)."
            ]
          },
          {
            "name": "Scan",
            "items": [
              "Run Scan (Current Location).",
              "Configure Scan Tools... (opens `PreferencesDialog` to scan tool section)."
            ]
          },
          {
            "name": "Report",
            "items": [
              "Generate PDF Report... (opens `ReportGenerationDialog`)."
            ]
          },
          {
            "name": "View",
            "items": [
              "Toggle AP List Panel.",
              "Zoom In / Zoom Out (for map)."
            ]
          },
          {
            "name": "Help",
            "items": [
              "About."
            ]
          }
        ]
      },
      {
        "name": "Dialogs",
        "description": "Each potentially its own `.py` file:",
        "dialog_list": [
          {
            "name": "Preferences Dialog",
            "file": "preferences_dialog.py",
            "fields": [
              "Input fields (`QLineEdit`) for Poppler path.",
              "\"Browse...\" buttons (`QPushButton`) for directory selection.",
              "Combobox for Language selection.",
              "Radio buttons/checkbox for Imperial/Metric measurement system.",
              "\"Save\" and \"Cancel\" buttons."
            ]
          },
          {
            "name": "Site Information Dialog",
            "file": "site_info_dialog.py",
            "fields": [
              "Input fields for Site Name (mandatory), Address, Contact, Telephone.",
              "\"OK\" and \"Cancel\" buttons."
            ]
          },
          {
            "name": "Floor Import Dialog",
            "file": "floor_import_dialog.py",
            "fields": [
              "File dialog to select `jpg`, `png`, `pdf` image.",
              "Input field for Floor Number.",
              "**PDF Handling:** If PDF, use `poppler` to convert selected page to image.",
              "**Cropping UI:**",
              {
                "type": "list",
                "items": [
                  "Displays the image.",
                  "Allows user to drag a selection box.",
                  "Shading outside the selected area.",
                  "\"Crop\" button."
                ]
              },
              "**Resizing/Aspect Ratio UI:**",
              {
                "type": "list",
                "items": [
                  "After cropping, shows the cropped image.",
                  "Automatically resizes to 1920x1080, adding black bars if aspect ratio is maintained.",
                  "Displays final dimensions.",
                  "\"Confirm\" button."
                ]
              },
              "\"Next\" (to `ScaleLineDialog`) and \"Cancel\" buttons."
            ]
          },
          {
            "name": "Scale Line Dialog",
            "file": "scale_line_dialog.py",
            "fields": [
              "Displays the processed floor image.",
              "Allows user to draw two lines (horizontal and vertical).",
              "**Horizontal Line Auto-placement:** Automatically placed 75px above the topmost detected horizontal line in the drawing, spanning between the leftmost and rightmost detected vertical lines in the drawing.",
              "**Vertical Line Auto-placement:** Automatically placed 75px to the left of the leftmost detected vertical line in the drawing, spanning vertically between the topmost and bottommost detected horizontal lines in the drawing.",
              "Text input fields for physical dimensions (e.g., \"40' 6\"\", \"30.9m\") for each line. These inputs are independent, allowing the application to detect if the drawing is out of scale.",
              "\"Smart snap\" functionality (optional, for aligning lines to edges/grid).",
              "\"Confirm\" and \"Cancel\" buttons."
            ]
          },
          {
            "name": "AP Placement Dialog",
            "file": "ap_details_dialog.py",
            "fields": [
              "Input fields for AP Name, Manufacturer, Model, IP Address, Ethernet MAC.",
              "\"Run Scan Now\" button (triggers immediate scan under the current location).",
              "\"Save AP\" and \"Cancel\" buttons."
            ]
          },
          {
            "name": "AP/Scan Point Details Dialog",
            "file": "ap_details_dialog.py, scan_point_details_dialog.py",
            "fields": [
              "When clicking on an existing AP/Scan Point marker.",
              "Displays stored data.",
              "Allows editing attributes.",
              "\"Run New Scan\" button (for `PlacedAP` and `ScanPoint` to update their `ap_list`).",
              "\"Update\" and \"Delete\" buttons."
            ]
          },
          {
            "name": "Report Generation Dialog",
            "file": "report_dialog.py",
            "fields": [
              "Options for report content (e.g., \"Include Raw Data Tables\", \"Include Floor Maps\").",
              "Placeholder for future options: \"Include Heatmaps\", \"Include Interference Maps\".",
              "\"Generate Report\" button.",
              "\"Save As...\" file dialog for PDF output."
            ]
          },
          {
            "name": "Message Boxes",
            "type": "QMessageBox",
            "description": "For warnings, errors, and confirmations."
          }
        ]
      }
    ]
  },
  {
    "section_title": "III. Core Functionality and Logic",
    "modules": [
      {
        "name": "Project Management",
        "file": "project_manager.py",
        "functions": [
          {
            "name": "New Project",
            "steps": [
              "Instantiate new `MapProject`.",
              "Open `SiteInfoDialog`.",
              "If `SiteInfo` is valid, open `FloorImportDialog` for the first floor."
            ]
          },
          {
            "name": "Save/Load Project",
            "steps": [
              "Serialize the entire `MapProject` object (including `SiteInfo`, `Floor` objects with image paths, `PlacedAP` and `ScanPoint` data) to a JSON file.",
              "Deserialize the JSON file back into a `MapProject` object.",
              "Handle image file copying/linking to a project-specific directory for portability."
            ]
          }
        ]
      },
      {
        "name": "Floor Management",
        "file": "floor_manager.py",
        "functions": [
          {
            "name": "Load Map Image",
            "steps": [
              "User selects an image file (JPG, PNG, PDF).",
              "If PDF, use `poppler` (`QProcess` call) to convert a specified page to a temporary image file.",
              "Load the image into a `QPixmap`.",
              "Pass the `QPixmap` to the `FloorImportDialog` for cropping."
            ]
          },
          {
            "name": "Image Cropping",
            "steps": [
              "Implement `mousePressEvent`, `mouseMoveEvent`, `mouseReleaseEvent` on the image display widget within `FloorImportDialog` for selection box drawing.",
              "Calculate crop rectangle.",
              "Crop the `QPixmap` and save the cropped image internally."
            ]
          },
          {
            "name": "Image Resizing",
            "steps": [
              "Resize the cropped `QPixmap` to 1920x1080 while maintaining aspect ratio (add black bars if necessary).",
              "Save this final scaled image internally (e.g., in a project-specific folder).",
              "All internal coordinates (AP, Scan Point) will be based on this 1920x1080 scaled image."
            ]
          },
          {
            "name": "Scale Line Definition",
            "steps": [
              "Implement drawing lines on the map within `ScaleLineDialog`.",
              "Capture start/end coordinates and associated physical dimension text.",
              "Store these in the `Floor` object."
            ]
          },
          {
            "name": "Add/Remove Floors",
            "steps": [
              "Manage the list of `Floor` objects within the `MapProject`."
            ]
          }
        ]
      },
      {
        "name": "AP Scanning Process",
        "file": "scan_manager.py",
        "functions": [
          {
            "name": "OS Detection",
            "steps": [
              "Determine the current operating system (`sys.platform`)."
            ]
          },
          {
            "name": "Script Execution",
            "type": "QProcess",
            "steps": [
              "Based on OS and configured paths, construct the command to execute the appropriate script (PowerShell or Bash).",
              "Create a `QProcess` instance.",
              "Connect `QProcess` signals: `readyReadStandardOutput()`, `finished()`, `errorOccurred()`.",
              "Start the process (`process.start()`)."
            ]
          },
          {
            "name": "Output Capture and Parsing",
            "steps": [
              "As the script outputs JSON data to stdout, read it incrementally.",
              "Once the process `finished()`, ensure all output is captured.",
              "Parse the JSON string into a Python dictionary/list of dictionaries.",
              "**Error Handling:** Catch `JSONDecodeError` for invalid JSON, `FileNotFoundError` if script path is incorrect, etc."
            ]
          },
          {
            "name": "Data Conversion",
            "steps": [
              "Iterate through the parsed JSON data and convert each AP entry into an `APData` object."
            ]
          },
          {
            "name": "Return Scan Data",
            "steps": [
              "Provide the list of `APData` objects to the calling function (e.g., `APPlacementDialog` or `MainWindow` for general scan points)."
            ]
          }
        ]
      },
      {
        "name": "AP Placement and Management",
        "file": "ap_manager.py",
        "functions": [
          {
            "name": "\"Place AP\" Mode",
            "steps": [
              "When active, mouse clicks on the map trigger AP placement."
            ]
          },
          {
            "name": "Mouse Click Event",
            "description": "(`mousePressEvent` on map widget):",
            "steps": [
              "Get mouse coordinates.",
              "Open `APPlacementDialog`.",
              "If user confirms, create `PlacedAP` object with entered data and coordinates.",
              "If \"Run Scan Now\" is clicked in `APPlacementDialog`, trigger `ScanManager` and associate the returned `APData` list.",
              "Add `PlacedAP` to the `current_floor.placed_aps` list.",
              "Draw a marker on the map."
            ]
          },
          {
            "name": "Dragging APs",
            "steps": [
              "Implement `mousePressEvent`, `mouseMoveEvent`, `mouseReleaseEvent` for dragging existing `PlacedAP` markers. Update `map_x`, `map_y`."
            ]
          },
          {
            "name": "Editing AP Attributes",
            "steps": [
              "Clicking on a `PlacedAP` marker opens `APDetailsDialog` to edit its properties or re-run a scan."
            ]
          }
        ]
      },
      {
        "name": "Scan Point Placement and Management",
        "file": "scan_point_manager.py",
        "functions": [
          {
            "name": "\"Place Scan Point\" Mode",
            "steps": [
              "When active, mouse clicks on the map trigger scan point placement."
            ]
          },
          {
            "name": "Mouse Click Event",
            "description": "(`mousePressEvent` on map widget):",
            "steps": [
              "Get mouse coordinates.",
              "Trigger `ScanManager` to perform a scan.",
              "Create `ScanPoint` object with coordinates and the returned `APData` list.",
              "Add `ScanPoint` to the `current_floor.scan_points` list.",
              "Draw a marker on the map."
            ]
          },
          {
            "name": "Editing Scan Point Attributes",
            "steps": [
              "Clicking on a `ScanPoint` marker opens `ScanPointDetailsDialog` to view/re-run its scan."
            ]
          }
        ]
      },
      {
        "name": "Data Visualization and Interaction",
        "file": "map_view.py",
        "functions": [
          {
            "name": "Display Map",
            "steps": [
              "Load the `current_floor.scaled_image_path` into the `QGraphicsScene`."
            ]
          },
          {
            "name": "Display Markers",
            "steps": [
              "For each `PlacedAP` and `ScanPoint` on the current floor, draw visual markers (e.g., custom icons or circles) on the `QGraphicsScene` at their `map_x`, `map_y` coordinates."
            ]
          },
          {
            "name": "Marker Interaction (Hover/Click)",
            "steps": [
              "Tooltips for summary info.",
              "Clicking opens respective details dialogs."
            ]
          },
          {
            "name": "Panning and Zooming",
            "steps": [
              "Implement `QGraphicsView`'s built-in panning and zooming or custom `mouseMoveEvent` and `wheelEvent` handlers."
            ]
          }
        ]
      },
      {
        "name": "Project Export",
        "file": "project_exporter.py",
        "functions": [
          {
            "name": "\"Save Project\" / \"Save Project As...\" Trigger",
            "steps": [
              "Initiates the export process."
            ]
          },
          {
            "name": "Create Temporary Directory",
            "steps": [
              "Create a temporary directory to assemble project files."
            ]
          },
          {
            "name": "Export Floor Maps",
            "steps": [
              "For each `Floor` in `MapProject.floors`:",
              {
                "type": "list",
                "items": [
                  "Save the `scaled_image_path` (the 1920x1080 image) as a PNG file within the temporary directory."
                ]
              }
            ]
          },
          {
            "name": "Export Project Data (JSON)",
            "steps": [
              "Serialize the entire `MapProject` object (excluding image paths that are now exported) into a single JSON file (e.g., `project_data.json`). This JSON will contain `SiteInfo`, `Floor` data (including `floor_number`, `scale_lines`, `placed_aps`, `scan_points`).",
              "Save this JSON file within the temporary directory."
            ]
          },
          {
            "name": "Create Manifest File (JSON)",
            "steps": [
              "Create a `manifest.json` file in the temporary directory.",
              "This manifest will list the exported floor map filenames, the main project data JSON filename, and potentially version information or other metadata."
            ]
          },
          {
            "name": "Zip Archiving",
            "steps": [
              "Compress the contents of the temporary directory into a single zip archive.",
              "Set the file extension of this zip archive to `.wls` (e.g., `MyProject.wls`)."
            ]
          },
          {
            "name": "Cleanup",
            "steps": [
              "Remove the temporary directory and its contents."
            ]
          },
          {
            "name": "Error Handling",
            "steps": [
              "Handle potential errors during file operations (e.g., disk full, permission issues)."
            ]
          }
        ]
      },
      {
        "name": "Report Generation",
        "file": "report_generator.py",
        "functions": [
          {
            "name": "\"Generate PDF Report...\" Trigger",
            "steps": [
              "Initiates the report generation process."
            ]
          },
          {
            "name": "Collect Data",
            "steps": [
              "Gather all relevant `SiteInfo`, `Floor` data, `PlacedAP` details, and `ScanPoint` data from the `MapProject` object."
            ]
          },
          {
            "name": "PDF Document Creation",
            "steps": [
              "Use a Python library like `reportlab` or `fpdf2` to create a PDF document."
            ]
          },
          {
            "name": "Report Structure (Initial)",
            "steps": [
              "Title page with Site Information.",
              "Table of Contents (listing floors).",
              "For each floor:",
              {
                "type": "list",
                "items": [
                  "Floor number/name.",
                  "Embedded scaled floor map image (PNG).",
                  "Table of `PlacedAP` details (Name, Manufacturer, Model, IP, MAC).",
                  "Table of `ScanPoint` details (Coordinates, Timestamp).",
                  "Detailed raw scan data tables for each `PlacedAP` and `ScanPoint` (SSID, BSSID, Signal, etc.)."
                ]
              }
            ]
          },
          {
            "name": "Future Expansion",
            "steps": [
              "Integrate heatmap generation (requires signal propagation algorithms and interpolation).",
              "Integrate interference map generation (requires analysis of overlapping channels and signal strengths)."
            ]
          },
          {
            "name": "Save PDF",
            "steps": [
              "Allow the user to choose the output filename and location for the PDF report."
            ]
          },
          {
            "name": "Error Handling",
            "steps": [
              "Handle errors during PDF generation (e.g., invalid data, library issues)."
            ]
          }
        ]
      }
    ]
  },
  {
    "section_title": "IV. Event Handling",
    "modules": [
      {
        "name": "UI Element Events",
        "steps": [
          "`QPushButton.clicked` signals.",
          "`QAction.triggered` signals (for menu items).",
          "`QLineEdit.textChanged` (for configuration/input).",
          "`QComboBox.currentIndexChanged` (for floor selection).",
          "`QTableWidget.itemSelectionChanged` (for selecting APs in the list)."
        ]
      },
      {
        "name": "Map Interaction Events",
        "description": "(on `QGraphicsView` or custom map widget):",
        "steps": [
          "`mousePressEvent`, `mouseMoveEvent`, `mouseReleaseEvent` for placing markers, dragging APs, panning.",
          "`wheelEvent` for zooming."
        ]
      },
      {
        "name": "`QProcess` Signals",
        "description": "(for scan scripts and poppler):",
        "steps": [
          "`readyReadStandardOutput()`: To read partial or complete JSON output.",
          "`finished(int exitCode, QProcess::ExitStatus exitStatus)`: To know when the script has completed. Check `exitCode` for success/failure.",
          "`errorOccurred(QProcess::ProcessError error)`: To catch errors like \"command not found\" or permission issues."
        ]
      }
    ]
  },
  {
    "section_title": "V. Error Handling and User Feedback",
    "modules": [
      {
        "name": "Robust Script Execution",
        "steps": [
          "Handle cases where scan scripts or `poppler` binaries are not found or not executable.",
          "Provide clear error messages in the status bar or a `QMessageBox`."
        ]
      },
      {
        "name": "JSON Parsing Errors",
        "steps": [
          "Gracefully handle malformed JSON output from the scan scripts.",
          "Inform the user if the scan data is invalid."
        ]
      },
      {
        "name": "File I/O Errors",
        "steps": [
          "Handle errors during loading/saving configuration, map images, or project files."
        ]
      },
      {
        "name": "User Input Validation",
        "steps": [
          "Validate mandatory fields (e.g., Site Name).",
          "Validate numerical inputs, paths, etc."
        ]
      },
      {
        "name": "User Feedback",
        "steps": [
          "Update the status bar to indicate ongoing operations (e.g., \"Scanning...\", \"Loading map...\", \"Cropping image...\", \"Exporting Project...\", \"Generating Report...\").",
          "Use `QMessageBox` for critical errors or confirmations.",
          "Provide visual cues (e.g., changing cursor, highlighting active mode, progress bars for lengthy operations).",
          "Implement a custom message box instead of `QMessageBox.warning` or `QMessageBox.critical` for better UI consistency."
        ]
      }
    ]
  }
]
