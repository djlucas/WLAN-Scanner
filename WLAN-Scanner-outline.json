[
  {
    "section_title": "I. Application Initialization and Core Setup",
    "modules": [
      {
        "name": "PyQt5 Application Bootstrap",
        "file": "main.py",
        "steps": [
          "Initialize `QApplication` instance.",
          "Load global configuration (see below).",
          "Set up internationalization (`i18n`).",
          "Create the main application window (`MainWindow`).",
          "Show the main window and start the event loop."
        ]
      },
      {
        "name": "Configuration Management",
        "file": "config_manager.py",
        "steps": [
          "Load Configuration: On startup, load application settings from a persistent configuration file (e.g., `~/.WLAN-Scanner/config.json` or `config.ini`).",
          {
            "type": "list",
            "items": [
              "Path to `poppler` binaries (for PDF handling).",
              "Default map image directory.",
              "Language setting (e.g., `en_US`).",
              "Measurement system (Imperial/Metric - boolean).",
              "Any other user preferences."
            ]
          },
          "Initial Setup Check: If configuration file does not exist or essential settings (like poppler path, language) are missing, prompt the user with the \"Preferences\" dialog on first launch. (Scan script paths are now hardcoded and not part of this check).",
          "Save Configuration: Provide functionality to save updated configuration settings."
        ]
      },
      {
        "name": "Internationalization",
        "file": "i18n_manager.py",
        "steps": [
          "Load translation strings from a specified language file (e.g., `i18n/en_US.txt`).",
          "Provide a mechanism to retrieve translated strings for all UI elements and messages.",
          "Allow dynamic language switching via preferences."
        ]
      },
      {
        "name": "Data Models and Structures",
        "file": "data_models.py",
        "steps": [
          {
            "type": "class_struct",
            "name": "APData",
            "description": "Define a structure to hold individual Access Point details from the scan (matches get-wlans script format):",
            "fields": [
              "`ssid` (string)",
              "`bssid` (string)",
              "`channel` (integer)",
              "`signal_strength` (integer, dBm - actual range -20 to -95 dBm)",
              "`security` (string, e.g., \"WPA2\", \"Open\")",
              "`frequency` (integer, MHz)",
              "`quality` (integer, 0-100%)",
              "`band` (string, e.g., \"2.4 GHz\", \"5 GHz\")"
            ]
          },
          {
            "type": "class_struct",
            "name": "ScanPoint",
            "description": "Represents a user-defined point on the map where a scan was performed:",
            "fields": [
              "`map_x`, `map_y` (float/integer coordinates on the scaled map image).",
              "`timestamp` (datetime object).",
              "`ap_list` (list of `APData` objects, representing all APs seen at this point)."
            ]
          },
          {
            "type": "class_struct",
            "name": "PlacedAP",
            "description": "Represents a user-placed Access Point on the map:",
            "fields": [
              "`name` (string, user-defined)",
              "`manufacturer` (string)",
              "`model` (string)",
              "`ip_address` (string)",
              "`ethernet_mac` (string)",
              "`map_x`, `map_y` (float/integer coordinates on the scaled map image).",
              "`associated_scan_data` (list of `APData` objects from the immediate scan under this AP).",
              "`timestamp_last_scan` (datetime object for the associated scan)."
            ]
          },
          {
            "type": "class_struct",
            "name": "Floor",
            "description": "Encapsulates data for a single floor plan:",
            "fields": [
              "`floor_number` (integer/string, e.g., \"1\", \"Ground Floor\").",
              "`original_image_path` (string).",
              "`cropped_image_path` (string, path to the internally saved cropped image).",
              "`scaled_image_path` (string, path to the internally saved 1920x1080 scaled image).",
              "`scale_line_horizontal` (ScaleLine object with physical dimensions).",
              "`scale_line_vertical` (ScaleLine object with physical dimensions).",
              "`placed_aps` (list of `PlacedAP` objects).",
              "`scan_points` (list of `ScanPoint` objects)."
            ]
          },
          {
            "type": "class_struct",
            "name": "SiteInfo",
            "description": "Stores general site information:",
            "fields": [
              "`site_name` (string, mandatory).",
              "`street`, `city`, `state_province`, `postal_code`, `country` (strings).",
              "`contact` (string).",
              "`telephone` (string)."
            ]
          },
          {
            "type": "class_struct",
            "name": "MapProject",
            "description": "Encapsulates all data for a complete mapping project:",
            "fields": [
              "`site_info` (`SiteInfo` object).",
              "`floors` (list of `Floor` objects).",
              "`current_floor_index` (integer, index of the currently active floor)."
            ]
          }
        ]
      }
    ]
  },
  {
    "section_title": "II. Interactive Map Interface (IMPLEMENTED)",
    "status": "COMPLETED",
    "modules": [
      {
        "name": "Interactive Map View",
        "file": "interactive_map_view.py",
        "status": "IMPLEMENTED",
        "components": [
          {
            "name": "Right-Click Context Menu System",
            "description": "Professional context-sensitive menus for all map interactions",
            "features": [
              "Right-click empty space: 'Place Access Point Here', 'Run Scan Here (Simulated)', bulk operations",
              "Right-click existing AP: Smart menu with Edit, Scan/Rescan, Clear data, Remove options",
              "Context adapts based on AP scan status (scanned vs unscanned)"
            ]
          },
          {
            "name": "Visual AP Status System",
            "description": "Color-coded AP markers indicating scan status",
            "features": [
              "ðŸ”µ Blue APs = Have scan data (surveyed)",
              "ðŸŸ  Orange APs = Need scanning (newly placed or data cleared)",
              "Visual feedback for scan status at a glance"
            ]
          },
          {
            "name": "Drag-and-Drop AP Positioning",
            "description": "Left-click and drag existing APs to reposition them",
            "features": [
              "Smooth dragging with real-time coordinate updates",
              "No accidental placement on left-click empty space"
            ]
          },
          {
            "name": "Immediate Scan Workflow",
            "description": "Smart scanning prompts after AP placement",
            "features": [
              "Automatic prompt: 'AP placed! Run scan now?'",
              "Default Yes for streamlined workflow",
              "Visual status updates (Orange â†’ Blue when scanned)"
            ]
          },
          {
            "name": "Scan Data Management",
            "description": "Flexible scan data lifecycle management",
            "features": [
              "Individual AP scan/rescan/clear options",
              "Bulk operations: 'Scan at All AP Locations', 'Clear All AP Scan Data'",
              "Preserve AP layouts while refreshing survey data"
            ]
          }
        ]
      },
      {
        "name": "Simulated Scanning System", 
        "file": "scan_simulator.py",
        "status": "IMPLEMENTED",
        "description": "Realistic WiFi data generation matching actual get-wlans script format",
        "features": [
          "JSON format matching get-wlans.ps1/sh output exactly",
          "Realistic signal ranges (-23 to -92 dBm from actual scan data)",
          "Proper channel/frequency mapping for 2.4GHz and 5GHz bands",
          "Quality calculations based on signal strength",
          "Real-world SSID patterns and network types"
        ]
      }
    ]
  },
  {
    "section_title": "III. User Interface Components",
    "modules": [
      {
        "name": "Main Window",
        "file": "main_window.py",
        "status": "UPDATED",
        "components": [
          {
            "name": "Interactive Map Display",
            "description": "Replaced simple image display with full interactive map view",
            "type": "InteractiveMapView widget"
          },
          {
            "name": "Enhanced Menu System",
            "description": "Updated scan menu with new interactive options",
            "features": [
              "Informational item: 'Place APs and Scan Points (Right-click on map)'",
              "Bulk scan operations in menu bar",
              "Real-time status updates for AP placement and scanning"
            ]
          },
          {
            "name": "Floor Selector",
            "description": "QComboBox for multi-floor navigation (existing)"
          }
        ]
      },
      {
        "name": "Existing Dialogs",
        "status": "WORKING",
        "dialog_list": [
          {
            "name": "Preferences Dialog",
            "file": "preferences_dialog.py",
            "status": "IMPLEMENTED"
          },
          {
            "name": "Site Information Dialog", 
            "file": "site_info_dialog.py",
            "status": "IMPLEMENTED"
          },
          {
            "name": "Floor Import Dialog",
            "file": "floor_import_dialog.py", 
            "status": "IMPLEMENTED"
          },
          {
            "name": "Scale Line Dialog",
            "file": "scale_line_dialog.py",
            "status": "IMPLEMENTED"
          }
        ]
      }
    ]
  },
  {
    "section_title": "IV. Core Functionality Status",
    "modules": [
      {
        "name": "Project Management",
        "file": "main_window.py (partial)",
        "status": "PARTIAL - Save/Load needed",
        "functions": [
          {
            "name": "New Project",
            "status": "IMPLEMENTED",
            "description": "Complete workflow from site info to floor import with scale lines"
          },
          {
            "name": "Save/Load Project", 
            "status": "TODO - NEXT PRIORITY",
            "description": "Need JSON serialization/deserialization of MapProject with image handling"
          }
        ]
      },
      {
        "name": "Floor Management",
        "status": "IMPLEMENTED",
        "description": "Complete PDF import, cropping, scaling, and scale line definition"
      },
      {
        "name": "AP Scanning Process",
        "status": "SIMULATED - Live integration pending",
        "description": "Simulated scanning works perfectly. Need to integrate actual get-wlans scripts.",
        "next_steps": [
          "Add connected network detection to scan scripts",
          "Integrate QProcess execution of actual scripts",
          "Fall back to simulation when scripts unavailable"
        ]
      }
    ]
  },
  {
    "section_title": "V. Next Development Phase - TOMORROW'S TASKS",
    "priorities": [
      {
        "priority": 1,
        "task": "Save/Load Functionality",
        "description": "Project persistence to enable data visualization development",
        "components": [
          "JSON serialization of MapProject objects", 
          "Image file management (copy to project directory)",
          "ZIP-based .wls project file format",
          "File dialogs for save/open operations"
        ]
      },
      {
        "priority": 2,
        "task": "Data Visualization",
        "description": "Heatmap generation and AP data tables",
        "components": [
          "Signal strength heatmaps with realistic color gradient",
          "Connected network focus (primary heatmap)",
          "AP data tables with sorting/filtering",
          "Coverage analysis and recommendations"
        ]
      },
      {
        "priority": 3,
        "task": "Live WiFi Integration", 
        "description": "Connect to actual get-wlans scripts",
        "components": [
          "QProcess execution of platform-specific scripts",
          "Connected network detection enhancement",
          "Error handling for script failures",
          "Fallback to simulation mode"
        ]
      },
      {
        "priority": 4,
        "task": "Report Generation",
        "description": "Qt â†’ HTML â†’ PDF pipeline",
        "components": [
          "HTML template system with Jinja2",
          "Professional report layout with print CSS",
          "Floor plan and heatmap embedding",
          "Executive summary with coverage analysis"
        ]
      }
    ]
  },
  {
    "section_title": "VI. Technical Decisions Made",
    "decisions": [
      {
        "topic": "Heatmap Color Gradient",
        "decision": "Green (-20 to -45 dBm) â†’ Yellow (-45 to -60) â†’ Orange (-60 to -75) â†’ Red (-75 to -90) â†’ Blue (-90+ dBm)",
        "rationale": "Based on actual scan data showing signals as strong as -23 dBm, not the typical -30 dBm Windows limitation"
      },
      {
        "topic": "Heatmap Focus",
        "decision": "Primary heatmap shows connected network signal strength",
        "rationale": "Most site surveys focus on coverage of the surveyed network, with secondary option to view other networks"
      },
      {
        "topic": "Report Generation Pipeline",
        "decision": "Qt â†’ HTML â†’ PDF via Poppler (not browser-based)",
        "rationale": "Leverages existing Qt/Poppler ecosystem, allows precise control over technical documentation layout"
      },
      {
        "topic": "Interaction Model",
        "decision": "Right-click only for placement, left-click for dragging",
        "rationale": "Eliminates accidental AP placement, more professional and deliberate workflow"
      },
      {
        "topic": "Scan Data Management",
        "decision": "Separate scan data lifecycle from AP placement",
        "rationale": "Allows site refresh surveys without losing carefully positioned AP layouts"
      }
    ]
  },
  {
    "section_title": "VII. Current Application State",
    "status": "Interactive Survey Phase (~70% Complete)",
    "capabilities": [
      "âœ… Complete project creation workflow",
      "âœ… PDF floor plan import with cropping and scaling", 
      "âœ… Interactive AP placement with right-click context menus",
      "âœ… Visual status indicators (blue/orange APs)",
      "âœ… Drag-and-drop AP repositioning",
      "âœ… Simulated WiFi scanning with realistic data",
      "âœ… Flexible scan data management",
      "âœ… Smart workflow with immediate scan prompts",
      "ðŸ”„ Ready for save/load implementation",
      "ðŸ”„ Ready for heatmap visualization development",
      "ðŸ”„ Ready for live WiFi script integration"
    ]
  }
]